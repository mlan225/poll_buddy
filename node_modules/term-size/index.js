'use strict';
<<<<<<< HEAD
const {execFileSync} = require('child_process');
const path = require('path');

const exec = (command, arguments_, shell) => execFileSync(command, arguments_, {encoding: 'utf8', shell}).trim();
=======
const path = require('path');
const execa = require('execa');
>>>>>>> 7667619318f2e7e4ad64e58abdc3812448859fd9

const create = (columns, rows) => ({
	columns: parseInt(columns, 10),
	rows: parseInt(rows, 10)
});

module.exports = () => {
<<<<<<< HEAD
	const {env, stdout, stderr} = process;
=======
	const env = process.env;
	const stdout = process.stdout;
	const stderr = process.stderr;
>>>>>>> 7667619318f2e7e4ad64e58abdc3812448859fd9

	if (stdout && stdout.columns && stdout.rows) {
		return create(stdout.columns, stdout.rows);
	}

	if (stderr && stderr.columns && stderr.rows) {
		return create(stderr.columns, stderr.rows);
	}

	// These values are static, so not the first choice
	if (env.COLUMNS && env.LINES) {
		return create(env.COLUMNS, env.LINES);
	}

	if (process.platform === 'win32') {
		try {
			// Binary: https://github.com/sindresorhus/win-term-size
<<<<<<< HEAD
			const size = exec(path.join(__dirname, 'vendor/windows/term-size.exe')).split(/\r?\n/);
=======
			const size = execa.sync(path.join(__dirname, 'vendor/windows/term-size.exe')).stdout.split(/\r?\n/);
>>>>>>> 7667619318f2e7e4ad64e58abdc3812448859fd9

			if (size.length === 2) {
				return create(size[0], size[1]);
			}
<<<<<<< HEAD
		} catch (_) {}
=======
		} catch (err) {}
>>>>>>> 7667619318f2e7e4ad64e58abdc3812448859fd9
	} else {
		if (process.platform === 'darwin') {
			try {
				// Binary: https://github.com/sindresorhus/macos-term-size
<<<<<<< HEAD
				const size = exec(path.join(__dirname, 'vendor/macos/term-size'), [], true).split(/\r?\n/);
=======
				const size = execa.shellSync(path.join(__dirname, 'vendor/macos/term-size')).stdout.split(/\r?\n/);
>>>>>>> 7667619318f2e7e4ad64e58abdc3812448859fd9

				if (size.length === 2) {
					return create(size[0], size[1]);
				}
<<<<<<< HEAD
			} catch (_) {}
=======
			} catch (err) {}
>>>>>>> 7667619318f2e7e4ad64e58abdc3812448859fd9
		}

		// `resize` is preferred as it works even when all file descriptors are redirected
		// https://linux.die.net/man/1/resize
		try {
<<<<<<< HEAD
			const size = exec('resize', ['-u']).match(/\d+/g);
=======
			const size = execa.sync('resize', ['-u']).stdout.match(/\d+/g);
>>>>>>> 7667619318f2e7e4ad64e58abdc3812448859fd9

			if (size.length === 2) {
				return create(size[0], size[1]);
			}
<<<<<<< HEAD
		} catch (_) {}

		if (process.env.TERM) {
			try {
				const columns = exec('tput', ['cols']);
				const rows = exec('tput', ['lines']);

				if (columns && rows) {
					return create(columns, rows);
				}
			} catch (_) {}
		}
=======
		} catch (err) {}

		try {
			const columns = execa.sync('tput', ['cols']).stdout;
			const rows = execa.sync('tput', ['lines']).stdout;

			if (columns && rows) {
				return create(columns, rows);
			}
		} catch (err) {}
>>>>>>> 7667619318f2e7e4ad64e58abdc3812448859fd9
	}

	return create(80, 24);
};
